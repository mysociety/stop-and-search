#!/usr/bin/env ruby

require 'csv'
require 'json'
require 'sqlite3'


local_authorities_json = JSON.parse(File.read('static/js/local_authorities.json'))
local_authorities = local_authorities_json['features'].map { _1['properties'] }

police_force_json = JSON.parse(File.read('static/js/police-forces.json'))
police_forces = police_force_json['features'].map { _1['properties'] }

constituencies_json = JSON.parse(File.read('static/js/constituencies.json'))
constituencies = constituencies_json['features'].map { _1['properties'] }

areas = local_authorities + police_forces + constituencies

# Get the path of the CSV file from the command line arguments
local_authorities_csv_file_path = 'vendor/ExtractSS/data/2023-08-21 - LAD_stop_search_all_metrics_2019-2021.csv'
police_forces_csv_file_path = 'vendor/ExtractSS/data/2023-08-23 - PFA_stop_search_all_metrics_2019-2021.csv'

# Read the CSV file
local_authorities_csv_data = CSV.read(local_authorities_csv_file_path, headers: true)
police_forces_csv_data = CSV.read(police_forces_csv_file_path, headers: true)

# Prepare the database
db = SQLite3::Database.new 'static/database.sqlite'

# AREAS
db.execute "DROP TABLE IF EXISTS areas"
db.execute <<-SQL
  CREATE TABLE areas (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    type TEXT NOT NULL,
    county TEXT,
    region TEXT,
    country TEXT
  );
SQL

# Insert each row into the database
areas.each do |area|
  row = local_authorities_csv_data.find { |row| row['la_code'] == area['id'] }

  if row
    area['county'] = row['county'] unless row['county'] == 'NA'
    area['region'] = row['region'] unless row['region'] == 'NA'
    area['country'] = row['country'] unless row['country'] == 'NA'
  end

  db.execute "INSERT INTO areas VALUES ( ?, ?, ?, ?, ?, ? )", [
    area['id'], area['name'], area['type'],
    area['county'], area['region'], area['country']
  ]
end

# DATA
db.execute "DROP TABLE IF EXISTS data"
db.execute <<-SQL
  CREATE TABLE data (
    area_id TEXT,
    date INT,
    metric TEXT NOT NULL,
    metric_category TEXT NOT NULL,
    ethnicity TEXT NOT NULL,
    value NUM,
    value_type TEXT,
    FOREIGN KEY(area_id) REFERENCES areas(id)
  );
SQL

# Insert each row into the database
local_authorities_csv_data.each do |row|
  next if row['metric'] == 'or'

  db.execute "INSERT INTO data VALUES ( #{(['?'] * 7).join(', ')} )", [
    row['la_code'],
    (row['date'] == 'NA' ? 0 : row['date']),
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

police_forces_csv_data.each do |row|
  next if row['metric'] == 'or'

  db.execute "INSERT INTO data VALUES ( #{(['?'] * 7).join(', ')} )", [
    row['force_code'],
    (row['date'] == 'NA' ? 0 : row['date']),
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

all_time = db.execute('SELECT area_id, "0" AS date, metric, metric_category, ' \
                      'ethnicity, AVG(value) AS average, SUM(value) AS sum, ' \
                      'value_type FROM data WHERE metric != "population" ' \
                      'GROUP BY area_id, metric, metric_category, ethnicity, ' \
                      'value_type').map do |d|
  {
    'area_id' => d[0],
    'date' => d[1],
    'metric' => d[2],
    'metric_category' => d[3],
    'ethnicity' => d[4],
    'value' => d[7] == 'frequency' ? d[6] : d[5],
    'value_type' => d[7]
  }
end

all_time.each do |row|
  db.execute "INSERT INTO data VALUES ( #{(['?'] * 7).join(', ')} )", [
    row['area_id'],
    row['date'],
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

# Close the database connection
db.close

File.write('static/database.version', Time.now.strftime('%F %R'))
