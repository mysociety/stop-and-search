#!/usr/bin/env ruby

require 'csv'
require 'json'
require 'sqlite3'
require 'sparql/client'
require 'net/http'


local_authorities_json = JSON.parse(File.read('static/js/local_authorities.json'))
local_authorities = local_authorities_json['features'].map { _1['properties'] }

police_force_json = JSON.parse(File.read('static/js/police-forces.json'))
police_forces = police_force_json['features'].map { _1['properties'] }

constituencies_json = JSON.parse(File.read('static/js/constituencies.json'))
constituencies = constituencies_json['features'].map { _1['properties'] }

areas = local_authorities + police_forces + constituencies

# Get the path of the CSV file from the command line arguments
local_authorities_csv_file_path = 'vendor/ExtractSS/data/2023-08-21 - LAD_stop_search_all_metrics_2019-2021.csv'
police_forces_csv_file_path = 'vendor/ExtractSS/data/2023-08-23 - PFA_stop_search_all_metrics_2019-2021.csv'

# Read the CSV file
local_authorities_csv_data = CSV.read(local_authorities_csv_file_path, headers: true)
police_forces_csv_data = CSV.read(police_forces_csv_file_path, headers: true)

# Prepare the database
db = SQLite3::Database.new 'static/database.sqlite'

# AREAS
db.execute 'DROP TABLE IF EXISTS areas'
db.execute <<-SQL
  CREATE TABLE areas (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    type TEXT NOT NULL,
    county TEXT,
    region TEXT,
    country TEXT
  );
SQL

# Insert each row into the database
areas.each do |area|
  row = local_authorities_csv_data.find { |row| row['la_code'] == area['id'] }

  if row
    area['county'] = row['county'] unless row['county'] == 'NA'
    area['region'] = row['region'] unless row['region'] == 'NA'
    area['country'] = row['country'] unless row['country'] == 'NA'
  end

  db.execute 'INSERT INTO areas VALUES ( ?, ?, ?, ?, ?, ? )', [
    area['id'], area['name'], area['type'],
    area['county'], area['region'], area['country']
  ]
end

# AREA INTERSECTIONS
db.execute "DROP TABLE IF EXISTS area_intersections"
db.execute <<-SQL
  CREATE TABLE area_intersections (
    area_id TEXT,
    intersected_area_id TEXT,
    FOREIGN KEY(area_id) REFERENCES areas(id),
    FOREIGN KEY(intersected_area_id) REFERENCES areas(id),
    UNIQUE(area_id, intersected_area_id)
  );
SQL

def fetch_arcgis_rest_endpoint(url)
  uri = URI(url)
  response = Net::HTTP.get(uri)
  parsed_data = JSON.parse(response)
  parsed_data['features'].map { |feature| feature['attributes'] }
end

lad_pcon = fetch_arcgis_rest_endpoint('https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD22_PCON22_LAD22_UTLA22_UK_LU/FeatureServer/0/query?where=1%3D1&outFields=LAD22CD,PCON22CD&returnDistinctValues=true&f=json')
pfa_lad = fetch_arcgis_rest_endpoint('https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/LAD22_CSP22_PFA22_EW_LU/FeatureServer/0/query?where=1%3D1&outFields=PFA22CD,LAD22CD&returnDistinctValues=true&f=json')

lad_pcon.each do |record|
  db.execute 'INSERT INTO area_intersections VALUES ( ?, ? )', [
    record['LAD22CD'], record['PCON22CD']
  ] if record['LAD22CD'] =~ /^(E|W)/
end

pfa_lad.each do |record|
  db.execute 'INSERT INTO area_intersections VALUES ( ?, ? )', [
    record['PFA22CD'], record['LAD22CD']
  ]

  pcon_query = <<~SQL
    SELECT DISTINCT intersected_area_id
    FROM area_intersections
    WHERE area_id = ?
  SQL
  pcons = db.execute(pcon_query, record['LAD22CD']).flatten.uniq

  pcons.each do |pcon|
    db.execute 'INSERT OR IGNORE INTO area_intersections VALUES ( ?, ? )', [
      record['PFA22CD'], pcon
    ]
  end
end

# PEOPLE
db.execute 'DROP TABLE IF EXISTS people'
db.execute <<-SQL
  CREATE TABLE people (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    type TEXT NOT NULL,
    title TEXT NOT NULL,
    UNIQUE(id)
  );
SQL

# PERSON_IDENTIFIERS
db.execute 'DROP TABLE IF EXISTS person_identifiers'
db.execute <<-SQL
  CREATE TABLE person_identifiers (
    person_id TEXT,
    type TEXT NOT NULL,
    value TEXT NOT NULL,
    FOREIGN KEY(person_id) REFERENCES people(id)
  );
SQL

# AREA_PEOPLE
db.execute 'DROP TABLE IF EXISTS area_people'
db.execute <<-SQL
  CREATE TABLE area_people (
    area_id TEXT,
    person_id TEXT,
    FOREIGN KEY(area_id) REFERENCES areas(id),
    FOREIGN KEY(person_id) REFERENCES people(id),
    UNIQUE(area_id, person_id)
  );
SQL

def sparql_client
  SPARQL::Client.new(
    'https://query.wikidata.org/sparql',
    method: :get, headers: {'User-Agent' => 'Stop and Search Research bot'}
  )
end

mp_query = <<~SPARQL
SELECT DISTINCT ?person ?personLabel ?seatLabel ?gss_code ?twfy ?twitter ?facebook ?wikipedia WHERE {
  ?person wdt:P31 wd:Q5;
    p:P39 ?ps.
  ?ps ps:P39 ?term.
  ?term wdt:P279 wd:Q16707842.
  ?ps pq:P580 ?start;
    pq:P768 ?seat.
  FILTER(NOT EXISTS { ?ps pq:P582 ?end. })
  ?seat wdt:P836 ?gss_code.
  OPTIONAL { ?person wdt:P2171 ?twfy. }
  OPTIONAL { ?person wdt:P10428 ?parlid. }
  OPTIONAL { ?person wdt:P2002 ?twitter. }
  OPTIONAL { ?person wdt:P2013 ?facebook. }
  OPTIONAL {
    ?wikipedia schema:about ?person;
      schema:inLanguage "en";
      schema:isPartOf <https://en.wikipedia.org/>.
  }
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
SPARQL

pcc_query = <<~SPARQL
SELECT DISTINCT ?person ?personLabel ?positionLabel ?gss_code ?wdtk (COALESCE(?twitterPerson, ?twitterPosition) AS ?twitter) (COALESCE(?facebookPerson, ?facebookPosition) AS ?facebook) (COALESCE(?wikipediaPerson, ?wikipediaPosition) AS ?wikipedia) WHERE {
  {
    ?person p:P39 ?ps.
    ?ps ps:P39 ?position.
    ?position wdt:P31 wd:Q58333.
    FILTER(NOT EXISTS { ?ps pq:P582 ?end_date. })
  }
  UNION
  {
    VALUES ?mayoralPositions {
      wd:Q106090919
      wd:Q115158000
      wd:Q121543752
    }
    ?person p:P39 ?ps.
    ?ps ps:P39 ?position.
    BIND(?mayoralPositions AS ?position)
    FILTER(NOT EXISTS { ?ps pq:P582 ?end_date. })
  }
  OPTIONAL {
    ?position wdt:P2541 ?area.
    ?area wdt:P836 ?gss_code.
  }
  OPTIONAL { ?position wdt:P8167 ?wdtk. }
  OPTIONAL { ?person wdt:P2002 ?twitterPerson. }
  OPTIONAL { ?position wdt:P2002 ?twitterPosition. }
  OPTIONAL { ?person wdt:P2013 ?facebookPerson. }
  OPTIONAL { ?position wdt:P2013 ?facebookPosition. }
  OPTIONAL {
    ?wikipediaPerson schema:about ?person;
      schema:inLanguage "en";
      schema:isPartOf <https://en.wikipedia.org/>.
  }
  OPTIONAL {
    ?wikipediaPosition schema:about ?position;
      schema:inLanguage "en";
      schema:isPartOf <https://en.wikipedia.org/>.
  }
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
SPARQL

sparql_client.query(mp_query).each do |record|
  id = record['person'].to_s.scan(/Q\d+/)[0]
  db.execute 'INSERT OR IGNORE INTO people VALUES ( ?, ?, ?, ? )', [
    id, record['personLabel'].to_s, 'mp', "MP for #{record['seatLabel']}"
  ]
  %w[wdtk twfy twitter facebook wikipedia].each do |type|
    value = record[type].to_s
    next unless value != ''

    db.execute 'INSERT OR IGNORE INTO person_identifiers VALUES ( ?, ?, ? )', [
      id, type, value
    ]
  end
  db.execute 'INSERT OR IGNORE INTO area_people VALUES ( ?, ? )', [
    record['gss_code'].to_s, id
  ]
end

sparql_client.query(pcc_query).each do |record|
  id = record['person'].to_s.scan(/Q\d+/)[0]
  db.execute 'INSERT OR IGNORE INTO people VALUES ( ?, ?, ?, ? )', [
    id, record['personLabel'].to_s, 'pcc', record['positionLabel'].to_s
  ]
  %w[wdtk twfy twitter facebook wikipedia].each do |type|
    value = record[type].to_s
    next unless value != ''

    db.execute 'INSERT OR IGNORE INTO person_identifiers VALUES ( ?, ?, ? )', [
      id, type, value
    ]
  end
  db.execute 'INSERT OR IGNORE INTO area_people VALUES ( ?, ? )', [
    record['gss_code'].to_s, id
  ]
end

# DATA
db.execute 'DROP TABLE IF EXISTS data'
db.execute <<-SQL
  CREATE TABLE data (
    area_id TEXT,
    date INT,
    metric TEXT NOT NULL,
    metric_category TEXT NOT NULL,
    ethnicity TEXT NOT NULL,
    value NUM,
    value_type TEXT,
    FOREIGN KEY(area_id) REFERENCES areas(id)
  );
SQL

# Insert each row into the database
local_authorities_csv_data.each do |row|
  next if row['metric'] == 'or'

  db.execute 'INSERT INTO data VALUES ( ?, ?, ?, ?, ?, ?, ? )', [
    row['la_code'],
    (row['date'] == 'NA' ? 0 : row['date']),
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

police_forces_csv_data.each do |row|
  next if row['metric'] == 'or'

  db.execute 'INSERT INTO data VALUES ( ?, ?, ?, ?, ?, ?, ? )', [
    row['force_code'],
    (row['date'] == 'NA' ? 0 : row['date']),
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

all_time = db.execute('SELECT area_id, "0" AS date, metric, metric_category, ' \
                      'ethnicity, AVG(value) AS average, SUM(value) AS sum, ' \
                      'value_type FROM data WHERE metric != "population" ' \
                      'GROUP BY area_id, metric, metric_category, ethnicity, ' \
                      'value_type').map do |d|
  {
    'area_id' => d[0],
    'date' => d[1],
    'metric' => d[2],
    'metric_category' => d[3],
    'ethnicity' => d[4],
    'value' => d[7] == 'frequency' ? d[6] : d[5],
    'value_type' => d[7]
  }
end

all_time.each do |row|
  db.execute 'INSERT INTO data VALUES ( ?, ?, ?, ?, ?, ?, ? )', [
    row['area_id'],
    row['date'],
    row['metric'],
    row['metric_category'],
    row['ethnicity'],
    row['value'],
    row['value_type']
  ]
end

# Close the database connection
db.close

File.write('static/database.version', Time.now.strftime('%F %R'))
