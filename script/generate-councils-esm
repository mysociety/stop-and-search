#!/bin/bash

# Load the API key from the .env file
source .env

# Create a blank array to store our features
declare -a features

# Create a directory for temporary files
mkdir -p tmp

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    echo "No arguments provided. Please provide GSS IDs as arguments."
    exit 1
fi

# Iterate over each GSS ID provided as an argument
for gss_id in "$@"
do
    response_file="tmp/${gss_id}.json"

    # Check if a cached response exists
    if [ ! -f "${response_file}" ]; then
        # Fetch data from the API with redirect follow
        curl -s -L -H "X-Api-Key: $MAPIT_API_KEY" "https://mapit.mysociety.org/area/${gss_id}.json" -o "${response_file}"
    fi

    # Check if the response was a 404
    if jq -e '.code == 404' "${response_file}" > /dev/null 2>&1; then
        echo "Error: Invalid GSS ID '${gss_id}'" >&2
        continue
    fi

    # Check if the response indicates a rate limit exceeded
    if grep -q "Rate limit exceeded" "${response_file}"; then
        echo "Error: Rate limit exceeded" >&2
        rm "${response_file}"
        exit 1
    fi

    # Extract the ID and name
    id=$(jq '.id' "${response_file}" 2>/dev/null)
    name=$(jq '.name' "${response_file}" 2>/dev/null)

    # Check if jq exited with an error
    if [ $? -ne 0 ]; then
        echo "Error: Unable to parse JSON response for GSS ID '${gss_id}'" >&2
        continue
    fi

    response_file="tmp/${id}.geojson"

    # Check if a cached response exists
    if [ ! -f "${response_file}" ]; then
        # Fetch the GeoJSON data
        curl -s -H "X-Api-Key: $MAPIT_API_KEY" "https://mapit.mysociety.org/area/${id}.geojson" -o "${response_file}"
    fi

    # Check if the response indicates a rate limit exceeded
    if grep -q "Rate limit exceeded" "${response_file}"; then
        echo "Error: Rate limit exceeded" >&2
        rm "${response_file}"
        exit 1
    fi

    # Add the properties to the GeoJSON
    current_feature=$(jq "{type: \"Feature\", geometry: ., properties: {name: ${name}, id: \"${gss_id}\", mapit_id: ${id}}}" "${response_file}" 2>/dev/null)

    # Check if jq exited with an error
    if [ $? -ne 0 ]; then
        echo "Error: Unable to parse JSON response for GSS ID '${gss_id}' and Name '${name}'" >&2
        continue
    fi

    # Add this feature to our array
    features+=("${current_feature}")
done

# Group all the features together in a FeatureCollection
feature_collection="{\"type\":\"FeatureCollection\", \"features\": [$(IFS=,; echo "${features[*] | jq -c .}")]}"
echo "${feature_collection}" > tmp/output.geojson

# Use mapshaper to simplify the GeoJSON data
mapshaper tmp/output.geojson -simplify dp 1% keep-shapes -o format=geojson precision=0.0001 tmp/compact.geojson 2>/dev/null

# Prefix the output with "export default"
echo "export default $(cat tmp/compact.geojson)"
